/**
 * Copyright 2022
 *
 * This file is part of On-line POMDP Planning Toolkit (OPPT).
 * OPPT is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 *
 * OPPT is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * OPPT. If not, see http://www.gnu.org/licenses/.
 */

#ifndef _SKD_KAMIKAZE_OBSERVATION_PLUGIN_HPP_
#define _SKD_KAMIKAZE_OBSERVATION_PLUGIN_HPP_

#include "../MazeProblemUtils/MazeProblemGeneralUtils.hpp"
#include "MazeProblemObservation.hpp"
#include "oppt/opptCore/Distribution.hpp"
#include "oppt/plugin/Plugin.hpp"

namespace oppt {

class MazeProblemObservationPlugin : public ObservationPlugin {
public:
  MazeProblemObservationPlugin() : ObservationPlugin() {}

  virtual ~MazeProblemObservationPlugin() = default;

  virtual bool load(const std::string &optionsFile) override {
    // Parse options files
    parseOptions_<MazeProblemGeneralOptions>(optionsFile);
    generalOptions_ = static_cast<MazeProblemGeneralOptions *>(options_.get());

    return true;
  }

  virtual ObservationResultSharedPtr
  getObservation(const ObservationRequest *observationRequest) const override {
    // Check if the listen action was executed
    // Container for the results information
    ObservationResultSharedPtr observationResult =
        std::make_shared<ObservationResult>();
    observationResult->state = observationRequest->currentState.get();
    observationResult->action = observationRequest->action;

    // Retrieve state information from the observation request
    VectorFloat stateVector =
        observationRequest->currentState->as<VectorState>()->asVector();

    // Create a default observation vector
    VectorFloat observationVector(2, 0);

    // Fully observable State
    observationVector = stateVector;
    // Wrap the observation into the corresponding object
    observationResult->observation =
        std::make_shared<MazeProblemObservation>(observationVector);

    // Add the observation error to the observationVector
    return observationResult;
  }

  virtual FloatType
  calcLikelihood(const RobotStateSharedPtr &state, const Action *action,
                 const Observation *observation) const override {
    // REVIEW: Is the nominal observation always 1.0?
    // If action was not listen. Return equal likelihood
    return 1.0;
  }

private:
  MazeProblemGeneralOptions *generalOptions_;
};

OPPT_REGISTER_OBSERVATION_PLUGIN(MazeProblemObservationPlugin)

} // namespace oppt

#endif
