#ifndef _SKD_ACTION_SPACE_DISCRETIZER_
#define _SKD_ACTION_SPACE_DISCRETIZER_
#include "../PentestProblemUtils/PentestProblemGeneralUtils.hpp"
#include "oppt/robotHeaders/ActionSpaceDiscretizer.hpp"

namespace oppt {

class PentestProblemActionSpaceDiscretizer : public ActionSpaceDiscretizer {
public:
  PentestProblemActionSpaceDiscretizer(ActionSpaceSharedPtr &actionSpace)
      : ActionSpaceDiscretizer(actionSpace) {
    LOGGING("Custom Pentest Action Space Discretizer");
  }

  virtual ~PentestProblemActionSpaceDiscretizer() {}

  virtual std::vector<ActionSharedPtr>
  getAllActionsInOrder(const unsigned int &numStepsPerDimension) const {
    std::vector<ActionSharedPtr> allActionsOrdered_;
    long code = 0;

    // Append open left action representation in vector form
    VectorFloat openLeftActionVec{PENTEST_PROBLEM_ACTIONS::MOVE_LEFT};
    ActionSharedPtr openLeftAction(new DiscreteVectorAction(openLeftActionVec));
    openLeftAction->as<DiscreteVectorAction>()->setBinNumber(code);
    code++;
    allActionsOrdered_.push_back(openLeftAction);

    VectorFloat openUpActionVec{PENTEST_PROBLEM_ACTIONS::MOVE_UP};
    ActionSharedPtr openUpAction(new DiscreteVectorAction(openUpActionVec));
    openUpAction->as<DiscreteVectorAction>()->setBinNumber(code);
    code++;
    allActionsOrdered_.push_back(openUpAction);

    VectorFloat openRightActionVec{PENTEST_PROBLEM_ACTIONS::MOVE_RIGHT};
    ActionSharedPtr openRightAction(
        new DiscreteVectorAction(openRightActionVec));
    openRightAction->as<DiscreteVectorAction>()->setBinNumber(code);
    code++;
    allActionsOrdered_.push_back(openRightAction);

    VectorFloat openDownActionVec{PENTEST_PROBLEM_ACTIONS::MOVE_DOWN};
    ActionSharedPtr openDownAction(new DiscreteVectorAction(openDownActionVec));
    openDownAction->as<DiscreteVectorAction>()->setBinNumber(code);
    code++;
    allActionsOrdered_.push_back(openDownAction);

    // Print size of action space
    std::cout << "SIZE OF THE ACTION SPACE IS " << allActionsOrdered_.size()
              << std::endl;
    getchar();

    // Print out list of actions to verify correctness
    // // Print actions
    std::cout << "PRINTING ACTION SPACE " << std::endl;
    for (auto actions : allActionsOrdered_) {
      actions->print(cout);
      std::cout << std::endl;
    }

    getchar();

    return allActionsOrdered_;
  }
};

} // namespace oppt

#endif
