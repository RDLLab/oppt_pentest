/**
 * Copyright 2022
 *
 * This file is part of On-line POMDP Planning Toolkit (OPPT).
 * OPPT is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 *
 * OPPT is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * OPPT. If not, see http://www.gnu.org/licenses/.
 */
#ifndef _PENTEST_PROBLEM_INITIAL_BELIEF_PLUGIN_HPP_
#define _PENTEST_PROBLEM_INITIAL_BELIEF_PLUGIN_HPP_

#include "../PentestProblemUtils/PentestProblemGeneralUtils.hpp"
#include "oppt/gazeboInterface/GazeboInterface.hpp"
#include "oppt/opptCore/Distribution.hpp"
#include "oppt/plugin/Plugin.hpp"

namespace oppt {
class PentestProblemInitialBeliefPlugin : public InitialBeliefPlugin {
public:
  PentestProblemInitialBeliefPlugin() : InitialBeliefPlugin() {}

  virtual ~PentestProblemInitialBeliefPlugin() = default;

  virtual bool load(const std::string &optionsFile) override {
    parseOptions_<PentestProblemGeneralOptions>(optionsFile);

    // Retrieve pointer to options file
    generalOptions_ =
        static_cast<PentestProblemGeneralOptions *>(options_.get());

    return true;
  }

  virtual RobotStateSharedPtr sampleAnInitState() override {

    // TODO: Convert from inputMachineStates if randomizeInitStates = false,
    MachineStates machineStates;

    std::vector<VectorFloat> inputMachineStates =
        generalOptions_->inputMachineStates;

    // Flatten input
    for (auto &ims : inputMachineStates) {
      machineStates.insert(machineStates.end(), begin(ims), end(ims));
    }

    // Wrap initial machine state vector into oppt RobotState structure
    RobotStateSharedPtr initialState =
        std::make_shared<VectorState>(machineStates);

    return initialState;
  }

private:
  PentestProblemGeneralOptions *generalOptions_;
};

OPPT_REGISTER_INITIAL_BELIEF_PLUGIN(PentestProblemInitialBeliefPlugin)

} // namespace oppt

#endif
