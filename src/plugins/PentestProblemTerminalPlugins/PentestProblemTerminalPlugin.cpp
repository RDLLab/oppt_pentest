/**
 * Copyright 2022
 *
 * This file is part of On-line POMDP Planning Toolkit (OPPT).
 * OPPT is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License published by the Free Software
 * Foundation, either version 2 of the License, or (at your option) any later
 * version.
 *
 * OPPT is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * OPPT. If not, see http://www.gnu.org/licenses/.
 */
#include "../PentestProblemUtils/PentestProblemGeneralUtils.hpp"
#include "oppt/gazeboInterface/GazeboInterface.hpp"
#include "oppt/plugin/Plugin.hpp"

namespace oppt {

class PentestProblemTerminalPlugin : public TerminalPlugin {
public:
  PentestProblemTerminalPlugin() : TerminalPlugin() {}

  virtual ~PentestProblemTerminalPlugin() = default;

  virtual bool load(const std::string &optionsFile) override {
    parseOptions_<PentestProblemGeneralOptions>(optionsFile);
    // Save pointer to options file
    generalOptions_ =
        static_cast<PentestProblemGeneralOptions *>(options_.get());
    robotEnvironment_ = robotEnvironment_;

    return true;
  }

  virtual ValidityReportSharedPtr
  isValid(const PropagationResultSharedPtr &propagationResult) override {
    // Always return true if next state can be created
    ValidityReportSharedPtr validityReport(
        new ValidityReport(propagationResult->nextState));
    validityReport->satisfiesConstraints = true;
    validityReport->isValid = true;

    return validityReport;
  }

  virtual bool
  isTerminal(const PropagationResultSharedPtr &propagationResult) override {

    /*** Need to guard against nullptr since Terminal Plugin is used initially.
    // Check in ProblemEnvironment.hpp
    // run(const unsigned int& run, std::ofstream & os, int argc, char const *
    argv[])
    ***/
    if (propagationResult->action != nullptr) {
      // Retrieve the current state
      VectorFloat resultState =
          propagationResult->nextState->as<VectorState>()->asVector();

      int nMachines = generalOptions_->nMachines;
      int nHackedMachines = 0;
      int nMachineParams = generalOptions_->nMachineParams;
      for (int i = 0; i < nMachines; i++) {
        int hacked_idx = (i + 1) * nMachineParams - 1;
        if (resultState[hacked_idx] == NOT_HACKED) {
          return false;
        }
      }
      return true;
    }

    // Still exploring the pentest
    return false;
  }

private:
  PentestProblemGeneralOptions *generalOptions_;

private:
};

OPPT_REGISTER_TERMINAL_PLUGIN(PentestProblemTerminalPlugin)

} // namespace oppt
